#version 430 core

in vec2 UV;

out vec4 outColor;

uniform sampler2D Color;
uniform usampler2D NormPos;
uniform sampler2D ShadowMap;

layout(location = 3) uniform vec3 LightDirection;
layout(location = 1) uniform mat4 ToLightMatrix;

float ShadowCalculation(vec3 position, vec3 normal);

void main()		
{
	vec2 uv = vec2(1 - UV.x, UV.y);

	uvec4 data = texture(NormPos, uv).rgba;
	vec2 temp = unpackHalf2x16(data.y);

	vec3 normal = vec3(unpackHalf2x16(data.x), temp.x);
	vec3 position = vec3(temp.y, unpackHalf2x16(data.z));		

	if(normal == vec3(0,0,0))
		discard;

	vec3 color = texture(Color, uv).rgb;

	float diffuse = max(dot(normal, LightDirection), 0.0);
	float ambient = 0.1f;

	gl_FragDepth = uintBitsToFloat(data.a);
	
	outColor = vec4(color * diffuse * ShadowCalculation(position, normal) + color * ambient, 1.0f);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float ShadowCalculation(vec3 position, vec3 normal)
{

	vec4 fragPositionLightSpace = ToLightMatrix * vec4(position, 1.0);

	vec3 projCoords = fragPositionLightSpace.xyz / fragPositionLightSpace.w;//if Ortho : meaningless
	
	projCoords = projCoords * 0.5f + 0.5f;

	//float closestDepth = texture(ShadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(ShadowMap, 0);

	float bias = 0.003;
	//float bias = max(0.05 * (1.0 - dot(normal, LightDirection)), 0.003);
	

	for(float x = -1; x <= 1; x += 0.5)
	{
		for(float y = -1; y <= 1; y += 0.5)
		{
			float pcfDepth = texture(ShadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 25.0;

	return 1 - shadow;
}