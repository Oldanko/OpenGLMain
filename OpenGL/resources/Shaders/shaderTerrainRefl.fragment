#version 430 core

in vec3 FragCoord;
in vec3 Normal;
in vec2 UV;

in float Height;
in float Slope;

layout(location = 0)out vec3 outColor;
layout(location = 1)out uvec4 outNormPos;

layout(location = 3) uniform vec3 surfPosition;
layout(location = 4) uniform vec3 surfNormal;

uniform sampler2D noiseTex;

vec3 TerrainColor();

void main()
{
	if(dot(surfNormal, FragCoord - surfPosition) > 0)
		discard;

	float noise = texture(noiseTex, UV/256).x;
	noise /= 2;
	noise += texture(noiseTex, UV/128).x;
	noise /= 2;
	noise += texture(noiseTex, UV/64).x;
	noise /= 5;
	noise += 0.9;
	
	outColor = TerrainColor() * noise;

	outNormPos = uvec4(0.0);
	outNormPos.x = packHalf2x16(Normal.xy);
	outNormPos.y = packHalf2x16(vec2(Normal.z, FragCoord.x));
	outNormPos.z = packHalf2x16(FragCoord.yz);
	outNormPos.a = floatBitsToUint(gl_FragCoord.z);
}


vec3 TerrainColor()
{
	vec3 grassland = vec3(70/255.0, 108/255.0, 8/255.0); 
	vec3 rock = vec3(120/255.0, 120/255.0, 120/255.0);
	vec3 bottom = vec3(58/255.0, 37/255.0, 30/255.0);

	vec3 color = grassland;

	float slopeMin = 0.98;
	float slopeMax = 0.95;

	float bottomMin = 1.35;
	float bottomMax = 2.0;


	if(Height < bottomMin)
		color = bottom;
	
	else if(Height < bottomMax)
	{
		float k = (Height - bottomMin)/(bottomMax - bottomMin);
		color = (grassland * k + bottom * (1 - k));
	}
	
	else if(Slope < slopeMax)
		color = rock;
	
	else if(Slope < slopeMin)
	{
		float k = (Slope - slopeMax)/(slopeMin-slopeMax);
		color = (grassland * k + rock * (1 - k));
	}

	return color;
}