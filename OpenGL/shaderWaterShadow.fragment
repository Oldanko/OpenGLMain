#version 330 core

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPosition;
in vec4 FragPositionCameraSpace;
in vec4 FragPositionLightSpace;

out vec4 outColor;

uniform sampler2D shadowMap;
uniform sampler2D reflection;
uniform sampler2D refraction;

uniform vec3 CamPosition;
uniform vec3 lightDirection;

uniform mat4 V;

float ShadowCalculation(vec4 fragPositionLightSpace)
{
	vec3 projCoords = fragPositionLightSpace.xyz / fragPositionLightSpace.w;//if Ortho : meaningless
	
	projCoords = projCoords * 0.5f + 0.5f;

	float closestDepth = texture(shadowMap, projCoords.xy).r;
	
	float currentDepth = projCoords.z;

	//float bias = max(0.05 * (1.0 - dot(Normal, lightDirection)), 0.005); //0.005;

	//float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
	 
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(float x = -1; x <= 1; x += 0.5)
	{
		for(float y = -1; y <= 1; y += 0.5)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth /*- bias*/ > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 25.0;

	return shadow;
}

void main()
{
	vec3 Normal = vec3(0.0f, 1.0f, 0.0f);

	vec3 projCoords = FragPositionCameraSpace.xyz / FragPositionCameraSpace.w;
	projCoords = projCoords * 0.5f + 0.5f;

	
	vec3 viewDir = normalize(CamPosition - FragPosition);
	vec3 reflSunDir = reflect(normalize(-lightDirection), Normal);

	float angle = exp(log(dot(viewDir, Normal))/3);
	
	float shadow = ShadowCalculation(FragPositionLightSpace);

	float spec = pow(max(dot(viewDir, reflSunDir), 0), 32);

	vec3 refl = texture(reflection, vec2(1 - projCoords.x, projCoords.y)).rgb;
	vec3 refr = texture(refraction, vec2(projCoords.x, projCoords.y)).rgb;

	outColor = vec4((refl * (1-angle) + refr * angle)* 0.9 + vec3(0.0, 0.0, 0.1) + (1 - shadow) * spec * 0.5 *vec3(2.0, 2.0, 0.8), 1.0);
}