#version 330 core

in vec2 TexCoord;
in vec3 Normal;
//in vec3 FragPosition;
in vec4 FragPositionLightSpace;

out vec4 outColor;

uniform sampler2D shadowMap;
uniform sampler2D diffuseMap;
uniform vec3 lightDirection;


float ShadowCalculation(vec4 fragPositionLightSpace)
{
	vec3 projCoords = fragPositionLightSpace.xyz / fragPositionLightSpace.w;//if Ortho : meaningless
	
	projCoords = projCoords * 0.5f + 0.5f;

	float closestDepth = texture(shadowMap, projCoords.xy).r;
	
	float currentDepth = projCoords.z;

	//float bias = 0.005;

	//float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
	 
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);

	for(float x = -1; x <= 1; x += 0.5)
	{
		for(float y = -1; y <= 1; y += 0.5)
		{
			float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth /*- bias*/ > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 25.0;

	return shadow;
}


void main()
{
	if(texture(diffuseMap, TexCoord).a < 0.7)
		discard;

	vec3 color = texture(diffuseMap, TexCoord).rgb;

	vec3 lightColor = vec3(1.0f);
	vec3 ambientColor = 0.3f*lightColor;

	float diffuse = max(dot(normalize(Normal), normalize(lightDirection)), 0.0);

	float shadow = ShadowCalculation(FragPositionLightSpace);

	outColor = vec4(ambientColor*color + (1.0f - shadow) * 0.7 * color * diffuse, 1.0f);
}