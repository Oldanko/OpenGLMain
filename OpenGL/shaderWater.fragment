#version 330 core

in vec2 TexCoord;
in vec3 Normal;
in vec3 Position;
in vec4 PositionCameraSpace;

out vec4 outColor;

uniform sampler2D reflection;
uniform sampler2D refraction;

uniform vec3 CamPosition;
uniform vec3 lightDirection;

uniform mat4 V;

void main()
{
	vec3 Normal = vec3(0.0f, 1.0f, 0.0f);

	vec3 projCoords = PositionCameraSpace.xyz / PositionCameraSpace.w;
	projCoords = projCoords * 0.5f + 0.5f;

	
	vec3 viewDir = normalize(CamPosition - Position);
	vec3 reflSunDir = reflect(normalize(-lightDirection), Normal);

	float angle = exp(log(dot(viewDir, Normal))/3);
	
	float spec = pow(max(dot(viewDir, reflSunDir), 0), 32);

	vec3 refl = texture(reflection, vec2(1 - projCoords.x, projCoords.y)).rgb;
	vec3 refr = texture(refraction, vec2(projCoords.x, projCoords.y)).rgb;


	//outColor = vec4(19/255.0, 32/255.0, 61/255.0, 0.8);
	//outColor = vec4(vec3(angle), 1.0);
	outColor = vec4((refl * (1-angle) + refr * angle)* 0.9 + vec3(0.0, 0.0, 0.1) + spec* 0.5 *vec3(2.0, 2.0, 0.8), 1.0);
	//outColor = vec4(reflSunDir, 1.0);
	}